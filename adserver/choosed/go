//конструктор
type Info struct {
	adBlockList AdBlockList
}

func NewInfo() *Info {
	return &Info{adBlockList : make(AdBlockList)}
}

---------------------------------

import "sync"

type SyncMap struct {
        lock *sync.RWMutex
        hm map[string]string
}
func (m *SyncMap) Put (k, v string) {
        m.lock.Lock()
        defer m.lock.Unlock()

        m.hm[k] = v, true
}
----------------------
import "sync"

type SyncMap struct {
        lock *sync.RWMutex
        hm map[string]string
}

func NewSyncMap() *SyncMap {
        return &SyncMap{lock: new(sync.RWMutex), hm: make(map[string]string)}
}

func (m *SyncMap) Put (k, v string) {
        m.lock.Lock()
        defer m.lock.Unlock()
        m.hm[k] = v
}

func main() {
    sm := NewSyncMap()
    sm.Put("Test", "Test")
}
---------------------------


You just need a constructor. A common used pattern is

func NewSyncMap() *SyncMap {
    return &SyncMap{hm: make(map[string]string)}
}

In case of more fields inside your struct, starting a goroutine as backend, or registering a finalizer everything could be done in this constructor.

func NewSyncMap() *SyncMap {
    sm := SyncMap{
        hm: make(map[string]string),
        foo: "Bar",
    }

    runtime.SetFinalizer(sm, (*SyncMap).stop)

    go sm.backend()

    return &sm
}
------------------------------------
import (
	"fmt"
	"sync"
)

type SyncMap struct {
	sync.RWMutex	// embedded.  see http://golang.org/ref/spec#Struct_types
	hm		map[string]string
}

// Mue's function
func NewSyncMap() *SyncMap {
	return &SyncMap{hm: make(map[string]string)}
}

func (m *SyncMap) Put(k, v string) {
	m.Lock()	// note lock.Lock stutter is gone
	m.hm[k] = v	// , true is from a very old version of Go, and even then it is not needed in this case.
	m.Unlock()	// I wouldn't bother with defer in such a simple function.
}

func (m *SyncMap) Get(k string) string {
	m.RLock()
	v := m.hm[k]
	m.RUnlock()
	return v
}

func main() {
	sm := NewSyncMap()
	sm.Put("kTest", "vTest")
	fmt.Println(sm.Get("kTest"))
}
-------------------------




